#KoBi!

kGMat = matrix([[1, 1/2, 1/3], [1/2, 1, 1/4], [1/3, 1/4, 1]], float)
bVec = matrix([[0.1],[0.1],[0.1]], float)

# Performs Jacobi Iterations
#
# @param initData The initial data vector
# @param epsilon The tolerance for the approximation
# @param maxIt The max numbers of jacobi iterations that can be performed
# @return
def jacobi_iter(initData, epsilon, maxIt):
    upper = kGMat.triu.copy()
    lower = kGMat.tril.copy()
    dElem = diagonal(kGMat).copy()
    d = identity(3)
    dInv = identity(3)
    for i in range(3):
        d[i,i] = dElem[i]
        dInv [i,i] = 1 / dElem[i]
    for j in range(maxIt):
        #if tolerance condition
        #matrix multiplication
        initData = dot(dot(dInv, (-1) * upper + lower), initData) + bVec
    return None

def gs_iter(initData, epsilon, maxIt):
    upper = kGMat.triu.copy()
    lower = kGMat.tril.copy()
    dElem = diagonal(kGMat).copy()
    s = dElem + lower
    sInv = matrix(kGMat.shape[0])
    a = s[0][0]
    b = s[1][0]
    d = s[2][0]
    c = s[1][1]
    e = s[2][1]
    f = s[2][2]
    for ct in range(3):
       sInv[0,0] = 1 / a
       sInv[1,0] = -b / (a * c)
       sInv[2,0] = (-c * d + b * e) / (a * c * f)
       sInv[1,1] = 1 / c
       sInv[2,1] = -e / (c * f)
       sInv[2,2] = 1 / f
    for j in range(maxIt):
         #if tolerance condition
        #matrix multiplication
         #initData = (sInv * (-1) * upper) * initData + bVec
        initData = dot(dot(sInv, (-1) * upper), initData) + bVec
    return None
